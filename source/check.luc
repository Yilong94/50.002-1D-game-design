
module check (
    input clk,
    input rst,
    input player1[49],
    input player2[49],
    input player,
    output endgame,
    output player2new[49],
    output player1new[49]
  ) {
  
  sig player1var[49];
  sig player2var[49];
  sig player1sum[6];
  sig player2sum[6];
  sig mask[49];
  sig playerandadj[49];
  sig player2intermediate[49];
  sig player1intermediate[49];
  var i;
  
  adjacencymat adjacencymat(.clk(clk), .rst(rst),.player(player));
  always {
    adjacencymat.currentstate = 0;
    mask = 49b1;
    endgame = 0;
    player1sum =6;
    player2sum =6;
    player1new = player1;
    player2new = player2;
    player2intermediate = player2;
    player1intermediate = player1;
    adjacencymat.button = 000;
    
    if (player == 0){ //check player 2 tokens
     for ( i =0; i<49; i++){
      if (mask&player2!=0){ //means that the mask is one of the tokens in player player2
        adjacencymat.currentstate = mask;
        playerandadj = adjacencymat.adjmatrix & player1; // check which spots in the adjacencymat are filled
        playerandadj = playerandadj^adjacencymat.adjmatrix;  // xor(adjacencymat, spots which are filled in the adjacencyma,t)
        if (playerandadj ==0){ //if the adjacency matrix is filled by the player1 --> means the token in the mask dies
        player2intermediate = player2intermediate & (~mask);
        }
        mask = mask<<1;
          }
      } 
    }
      
    if (player == 1){ //check player 1 tokens
     for ( i =0; i<49; i++){
      if (mask&player1!=0){ //means that the mask is one of the tokens in player player2
        adjacencymat.currentstate = mask;
        playerandadj = adjacencymat.adjmatrix & player2; // check which spots in the adjacencymat are filled
        playerandadj = playerandadj^adjacencymat.adjmatrix;  // xor(adjacencymat, spots which are filled in the adjacencymat)
        if (playerandadj ==0){ //if the adjacency matrix is filled by the player1 --> means the token in the mask dies
        player1intermediate = player1intermediate & (~mask);
        }
        mask = mask<<1;
          }
      }
    } 
      
      
      //adjacencymat.button = 010; 
      //adjacencymat.currentstate = newlyaddedposition; // set the current state as the newlyaddedposition
      //checking = adjacencymat.currentposition; //set checking as the new current position 
      //playerandadj = adjacencymat.adjmatrix & player1; // check which spots in the adjacencymat are filled
      //playerandadj = playerandadj^adjacencymat.adjmatrix;  // xor(adjacencymat, spots which are filled in the adjacencymat)
      //if (playerandadj ==0){ //if the adjacency matrix is filled by the player1 --> means the token in the mask dies
      //player2intermediate = player2intermediate & (~mask);
       
    player1new =player1intermediate;
    player2new = player2intermediate;
    
    player1sum = player1sum+ player1intermediate[0];
    player1var = player1>>1; //48 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //47 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //46 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //45 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //44 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //43 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //42 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //41 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //40 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //39 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //38 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //37 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //36 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //35 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //34 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //33 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //32 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //31 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //30 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //29 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //28 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //27 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //26 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //25 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //24 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //23 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //22 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //21 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //20 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //19 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //18 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //17 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //16 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //15 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //14 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //13 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //12 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //11 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //10 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //9 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //8 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //7 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //6 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //5 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //4 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //3 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //2 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //1 bits left
    player1sum = player1sum + player1var[0];
    player1var = player1var>>1; //0 bits left
    player1sum = player1sum + player1var[0];
    
    player2sum = player2sum+ player2intermediate[0];
    player2var = player2>>1; //48 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //47 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //46 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //45 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //44 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //43 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //42 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //41 bits left
    player2sum = player2sum +

    player2var[0];

    player2var = player2var>>1; //40 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //39 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //38 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //37 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //36 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //35 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //34 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //33 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //32 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //31 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //30 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //29 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //28 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //27 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //26 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //25 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //24 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //23 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //22 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //21 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //20 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //19 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //18 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //17 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //16 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //15 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //14 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //13 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //12 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //11 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //10 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //9 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //8 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //7 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //6 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //5 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //4 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //3 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //2 bits left 
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //1 bits left
    player2sum = player2sum + player2var[0];
    player2var = player2var>>1; //0 bits left 
    player2sum = player2sum + player2var[0];
   
    if (player1sum <=2){
          endgame = 1;}
    else if (player2sum <=2){
          endgame =1;}
  }
}