module adder8 (
    input alufn[6],
    input a[49],  
    input b[49],  
    output out[49],  
    output z,       
    output n,       
    output v     
  ) {
  
  sig sum[49]; // sum
  sig xb[49];  // xb

  always {
    xb = b ^ 49x{alufn[0]}; // xb = XOR(B,alufn[0])
    case(alufn[1:0]){
    2b00:sum = a+b;     // sum
    2b01:sum = a-b;     // sub
    2b10:sum = a*b;     // multiplication
    default:sum = a-b;  // default case to be 0
  }
  v = (a[48] & xb[48] & ~sum[48]) | (~a[48] & ~xb[48] & sum[48]);    // return true when overflows in addition
  n = sum[48];                                                  // return true when S is negative
  z = ~|sum;                                                   // return true when S outputs are all zero
  out = sum;                                                   // return sum as out 
}
}