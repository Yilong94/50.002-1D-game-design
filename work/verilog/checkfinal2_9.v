/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module checkfinal2_9 (
    input clk,
    input rst,
    input [48:0] player1,
    input [48:0] player2,
    input [3:0] playercount1,
    input [3:0] playercount2,
    input player,
    input [0:0] startcheck,
    input nextbutton,
    output reg [48:0] player2new,
    output reg [48:0] player1new,
    output reg [3:0] player1newcount,
    output reg [3:0] player2newcount,
    output reg [48:0] myled,
    output reg [0:0] finish
  );
  
  
  
  localparam START_checkstates = 5'd0;
  localparam S3_checkstates = 5'd1;
  localparam S4_checkstates = 5'd2;
  localparam S5_checkstates = 5'd3;
  localparam S11_checkstates = 5'd4;
  localparam S15_checkstates = 5'd5;
  localparam S18_checkstates = 5'd6;
  localparam S21_checkstates = 5'd7;
  localparam S22_checkstates = 5'd8;
  localparam S23_checkstates = 5'd9;
  localparam S24_checkstates = 5'd10;
  localparam S25_checkstates = 5'd11;
  localparam S26_checkstates = 5'd12;
  localparam S27_checkstates = 5'd13;
  localparam S28_checkstates = 5'd14;
  localparam S29_checkstates = 5'd15;
  localparam S32_checkstates = 5'd16;
  localparam S35_checkstates = 5'd17;
  localparam S39_checkstates = 5'd18;
  localparam S45_checkstates = 5'd19;
  localparam S46_checkstates = 5'd20;
  localparam S47_checkstates = 5'd21;
  localparam END_checkstates = 5'd22;
  
  reg [4:0] M_checkstates_d, M_checkstates_q = START_checkstates;
  reg [48:0] M_tempplayer1_d, M_tempplayer1_q = 1'h0;
  reg [48:0] M_tempplayer2_d, M_tempplayer2_q = 1'h0;
  reg [3:0] M_tempplayercount1_d, M_tempplayercount1_q = 1'h0;
  reg [3:0] M_tempplayercount2_d, M_tempplayercount2_q = 1'h0;
  wire [49-1:0] M_adjacencymat_currentposition;
  wire [49-1:0] M_adjacencymat_adjmatrix;
  reg [3-1:0] M_adjacencymat_button;
  reg [49-1:0] M_adjacencymat_currentstate;
  adjacencymat_30 adjacencymat (
    .clk(clk),
    .rst(rst),
    .player(player),
    .button(M_adjacencymat_button),
    .currentstate(M_adjacencymat_currentstate),
    .currentposition(M_adjacencymat_currentposition),
    .adjmatrix(M_adjacencymat_adjmatrix)
  );
  reg [29:0] M_counter_d, M_counter_q = 1'h0;
  
  wire [1-1:0] M_edgestart_out;
  reg [1-1:0] M_edgestart_in;
  edge_detector_2 edgestart (
    .clk(clk),
    .in(M_edgestart_in),
    .out(M_edgestart_out)
  );
  
  reg playerandadj;
  
  reg checkplayerwithadj;
  
  reg checkplayertoken;
  
  reg tempSignal;
  
  reg [0:0] finishsignal;
  
  localparam X = 5'h1d;
  
  always @* begin
    M_checkstates_d = M_checkstates_q;
    M_tempplayer2_d = M_tempplayer2_q;
    M_tempplayercount2_d = M_tempplayercount2_q;
    M_tempplayer1_d = M_tempplayer1_q;
    M_counter_d = M_counter_q;
    M_tempplayercount1_d = M_tempplayercount1_q;
    
    M_adjacencymat_currentstate = 49'h0000000000000;
    player1new = player1;
    player2new = player2;
    player1newcount = playercount1;
    player2newcount = playercount2;
    M_adjacencymat_button = 1'h0;
    finishsignal = 1'h0;
    finish = finishsignal;
    M_edgestart_in = startcheck;
    myled = 49'h000000000001c;
    
    case (M_checkstates_q)
      START_checkstates: begin
        M_edgestart_in = startcheck;
        if (M_edgestart_out == 1'h1) begin
          M_tempplayer1_d = player1;
          M_tempplayer2_d = player2;
          M_checkstates_d = S3_checkstates;
          finishsignal = 1'h0;
          finish = finishsignal;
          M_counter_d = 1'h0;
        end
      end
      S3_checkstates: begin
        tempSignal = 49'h0000000000004;
        M_adjacencymat_currentstate = tempSignal;
        M_counter_d = M_counter_q + 1'h1;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          if (M_counter_q[29+0-:1] == 1'h1) begin
            M_checkstates_d = S4_checkstates;
            M_counter_d = 1'h0;
          end
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S4_checkstates;
        end
      end
      S4_checkstates: begin
        tempSignal = 49'h0000000000008;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S5_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S5_checkstates;
        end
      end
      S5_checkstates: begin
        tempSignal = 49'h0000000000010;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S11_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S11_checkstates;
        end
      end
      S11_checkstates: begin
        tempSignal = 49'h0000000000400;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S15_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S15_checkstates;
        end
      end
      S15_checkstates: begin
        tempSignal = 49'h0000000004000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S18_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S18_checkstates;
        end
      end
      S18_checkstates: begin
        tempSignal = 49'h0000000020000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S21_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S21_checkstates;
        end
      end
      S21_checkstates: begin
        tempSignal = 49'h0000000100000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S22_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S22_checkstates;
        end
      end
      S22_checkstates: begin
        tempSignal = 49'h0000000200000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S23_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S23_checkstates;
        end
      end
      S23_checkstates: begin
        tempSignal = 49'h0000000400000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S24_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S24_checkstates;
        end
      end
      S24_checkstates: begin
        tempSignal = 49'h0000000800000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S25_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S25_checkstates;
        end
      end
      S25_checkstates: begin
        tempSignal = 49'h0000001000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S26_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S26_checkstates;
        end
      end
      S26_checkstates: begin
        tempSignal = 49'h0000002000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S27_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S27_checkstates;
        end
      end
      S27_checkstates: begin
        tempSignal = 49'h0000004000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S28_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S28_checkstates;
        end
      end
      S28_checkstates: begin
        tempSignal = 49'h0000008000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S29_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S29_checkstates;
        end
      end
      S29_checkstates: begin
        tempSignal = 49'h0000010000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S32_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S32_checkstates;
        end
      end
      S32_checkstates: begin
        tempSignal = 49'h0000080000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S35_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S35_checkstates;
        end
      end
      S35_checkstates: begin
        tempSignal = 49'h0000400000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S39_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S39_checkstates;
        end
      end
      S39_checkstates: begin
        tempSignal = 49'h0004000000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S45_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S45_checkstates;
        end
      end
      S45_checkstates: begin
        tempSignal = 49'h0100000000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S46_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S46_checkstates;
        end
      end
      S46_checkstates: begin
        tempSignal = 49'h0200000000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = S47_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = S47_checkstates;
        end
      end
      S47_checkstates: begin
        tempSignal = 49'h0400000000000;
        M_adjacencymat_currentstate = tempSignal;
        myled = tempSignal;
        if (player == 1'h0) begin
          playerandadj = M_adjacencymat_adjmatrix & player1;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer2_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer2_d = M_tempplayer2_q & ~tempSignal;
            M_tempplayercount2_d = M_tempplayercount2_q - 1'h1;
          end else begin
            M_tempplayer2_d = M_tempplayer2_q;
            M_tempplayercount2_d = M_tempplayercount2_q;
          end
          M_checkstates_d = END_checkstates;
        end else begin
          playerandadj = M_adjacencymat_adjmatrix & player2;
          checkplayerwithadj = playerandadj ^ M_adjacencymat_adjmatrix;
          checkplayertoken = tempSignal & M_tempplayer1_q;
          if (checkplayerwithadj == 49'h0000000000000 && checkplayertoken == tempSignal) begin
            M_tempplayer1_d = M_tempplayer1_q & ~tempSignal;
            M_tempplayercount1_d = M_tempplayercount1_q - 1'h1;
          end else begin
            M_tempplayer1_d = M_tempplayer1_q;
            M_tempplayercount1_d = M_tempplayercount1_q;
          end
          M_checkstates_d = END_checkstates;
        end
      end
      END_checkstates: begin
        finishsignal = 1'h1;
        finish = finishsignal;
        if (player == 1'h0) begin
          player2new = M_tempplayer2_q;
          player2newcount = M_tempplayercount2_q;
          player1new = player1;
          player1newcount = playercount1;
        end else begin
          player1new = M_tempplayer1_q;
          player1newcount = M_tempplayercount1_q;
          player2new = player2;
          player2newcount = playercount2;
        end
        M_checkstates_d = START_checkstates;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_tempplayer1_q <= 1'h0;
      M_tempplayer2_q <= 1'h0;
      M_tempplayercount1_q <= 1'h0;
      M_tempplayercount2_q <= 1'h0;
      M_counter_q <= 1'h0;
      M_checkstates_q <= 1'h0;
    end else begin
      M_tempplayer1_q <= M_tempplayer1_d;
      M_tempplayer2_q <= M_tempplayer2_d;
      M_tempplayercount1_q <= M_tempplayercount1_d;
      M_tempplayercount2_q <= M_tempplayercount2_d;
      M_counter_q <= M_counter_d;
      M_checkstates_q <= M_checkstates_d;
    end
  end
  
endmodule
